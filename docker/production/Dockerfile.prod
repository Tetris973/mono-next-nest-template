# To build production setup, go to root folder and run
# For example
# <target> = nest
# <name>:<tag> = nest:latest
# docker build --tag <name>:<tag> --target <target> -f docker/production/Dockerfile.prod .

FROM registry.gitlab.com/tetris973/mono-next-nest-template/custom-node-image:latest AS base


# Install dependencies
FROM base AS deps
WORKDIR /usr/src/app
# Copy only package files first to leverage Docker cache
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml .nvmrc ./
COPY patches ./patches
COPY apps/server/package.json ./apps/server/
COPY apps/web/package.json ./apps/web/
# The client sdk needed by the frontend otherwise "pnpm i" does not install it for the frontend
# !!! Be careful to have generated the latest sdk before running this dockerfile !!!
COPY packages/backend-api-sdk ./packages/backend-api-sdk
RUN --mount=type=cache,id=pnpm,target=/pnpm/store \
    pnpm install --frozen-lockfile

# Nest build stage
FROM deps AS nest-build
WORKDIR /usr/src/app
# Get the node_modules from the deps stage as they are normaly excluded with .dockerignore
# This enable to install correctly deps that are sometimes dependant on the os, and in this context, to the docker image architecture.
COPY --from=deps /usr/src/app/node_modules ./node_modules
# Copy project files needed for installtion
COPY apps/server ./apps/server
COPY tsconfig.json ./
# Generate prisma client, needed for build.
RUN pnpm --filter server db-generate
RUN pnpm --filter server build
# This command produces an output folder "/prod/server" with only prod dependencies and folders specified in the file section of the package.json, in occurrence here it is /dist.
RUN pnpm --filter server deploy --prod /prod/server
# The pnpm deploy command does not copy the prisma client generated by prisma generate from the dev node_modules to the prod node_modules
# So we need to copy it manually
RUN cp -r ./node_modules/.pnpm/@prisma+client* /prod/server/node_modules/.pnpm/
# Copy the schema and the migration for prisma migration
RUN cp ./apps/server/src/prisma/schema.prisma /prod/server/dist/prisma/schema.prisma
RUN cp -r ./apps/server/src/prisma/migrations /prod/server/dist/prisma/migrations


# Next build stage
FROM deps AS next-build
WORKDIR /usr/src/app
COPY --from=deps /usr/src/app/node_modules ./node_modules
# Copy the whole web app folder
COPY apps/web ./apps/web
COPY tsconfig.json ./
# Nextjs runs validation of env variables at build time, so we need env file
# We use the .env file from docker folder, this is the one that is used in the docker-compose.yml file when running the application
COPY docker/production/.env.next ./apps/web/.env.production.local
# Disable next telemetry during build
ENV NEXT_TELEMETRY_DISABLED 1
RUN pnpm --filter web build
# Next standalone output with pnpm mono repo produces a nested folder with the whole architecture of the mono repo
# With the following comands we create a flat folder with minimal files needed to run the nextjs application
# pnpm deploy create a unique node_modules with all requireed prod dependcy, without it, Next standalone output produce multiple node_modules with simlinks.
RUN pnpm deploy --filter=web --prod /prod/web
# Move standalone files to the root of prod/web
RUN mv /prod/web/.next/standalone/apps/web/* /prod/web/
# Merge .next directories
RUN cp -R /prod/web/.next/standalone/apps/web/.next/* /prod/web/.next/ && \
    rm -rf /prod/web/.next/standalone
# Remove unnecessary files and directories
RUN rm -rf /prod/web/README.md
# Copy static files, according to next.js docs, static files and public are usually served by a CDN
# For the moment we serve them locally
RUN cp -r /usr/src/app/apps/web/.next/static/ /prod/web/.next/static/
# If you have a public folder, uncomment the following line
# RUN cp -r /usr/src/app/apps/web/public /prod/web/public


# ###########################
#  DOCKER PRODUCTION IMAGES #
# ###########################

# Intermediate stage for setting ownership of the whole app folder to the non-root user for next
FROM base AS nest-permissions
WORKDIR /app
COPY --from=nest-build /prod/server /app
# Create logs directory and set permissions otherwise error because user is not root
RUN mkdir -p /app/logs && chown -R 1000:1000 /app && chmod -R 755 /app/logs

# Nest production image stage
FROM gcr.io/distroless/nodejs20-debian12 AS nest
ENV NODE_ENV=production
WORKDIR /app
COPY --from=nest-permissions /app /app
USER 1000
EXPOSE 4000
CMD ["dist/main.js"]

# Prisma migrate production image stage
FROM base AS prisma-migrate
WORKDIR /app
COPY --from=nest-permissions /app /app
# Install Prisma CLI with the version from @prisma+client path as it not present because it is a dev dependency
RUN PRISMA_CLIENT_PATH=$(find ./node_modules/.pnpm -name "@prisma+client*" -type d) && \
    PRISMA_VERSION=$(echo $PRISMA_CLIENT_PATH | grep -oP '@prisma\+client@\K[^_]+') && \
    echo "Installing Prisma version: $PRISMA_VERSION" && \
    pnpm add -D prisma@$PRISMA_VERSION
# Delete all non prod seeding to prevent seeding development data in production server
RUN rm -rf /app/dist/prisma/seeding/*.seed.js*
COPY --chown=1000:1000 docker/production/prisma-migrate.entrypoint.sh /prisma-migrate.entrypoint.sh
RUN chmod +x /prisma-migrate.entrypoint.sh
USER 1000
ENTRYPOINT ["/prisma-migrate.entrypoint.sh"]


# Intermediate stage for setting Next.js permissions
FROM base AS next-permissions
WORKDIR /app
COPY --from=next-build /prod/web /app
RUN mkdir -p /app/logs && chown -R 1000:1000 /app && chmod -R 755 /app/logs

# Next production image stage
FROM gcr.io/distroless/nodejs20-debian12 AS next
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED 1
WORKDIR /app
COPY --from=next-permissions /app /app
USER 1000
EXPOSE 3000
CMD ["server.js"]