{
  "name": "mono-react-nest-template",
  "version": "1.0.0",
  "description": "A template for a monorepo with a React frontend and a NestJS backend",
  "main": "index.js",
  "scripts": {
    "preinstall": "npx only-allow pnpm",
    "dev": "pnpm run --parallel dev",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "Cedric OLENDER",
  "license": "MIT",
  "json-comments": {
    "tips": "Please install the JsonComments plugin to enable commenting functionality for JSON files, see: https://github.com/zhangfisher/json_comments_extension",
    "package.json": {
      "scripts.dev": "Runs dev from server and web in parallel",
      "scripts.preinstall": "to prevent from installing packages without pnpm"
    },
    "apps/backend/package.json": {
      "scripts.start:dev": "cross-env is used for setting NODE_ENV without bugs on multiple platforms (Windows, linux, MacOs)"
    },
    "apps/server/package.json": {
      "scripts.preinstall": "to prevent from installing packages without pnpm",
      "dependencies.@nestjs/mapped-types": "TODO: replace this dependcy by swagger when it will be used, as it can cause problems",
      "scripts.dev-env": "To setup dev env variable, to use in other scripts",
      "scripts.prod-env": "To setup prod env variable, to use in other scripts",
      "scripts.compose:dev": "run the docker-compose.yml file in dev mode",
      "scripts.db-migrate": "Create and run prisma changes to the DEV database",
      "prisma.seed": "ts-node is needed, otherwise error",
      "scripts.db-seed:force": "ERASE DB and seed the tables from specified seed script inf src/prisma/seeding (sh -c is needed to load env variable in both command call)",
      "scripts.db-seed": "seed tables from specified seed script in src/prisma/seeding"
    },
    "apps/web/package.json": {
      "scripts.preinstall": "to prevent from installing packages without pnpm"
    },
    "apps/server/nest-cli.json": {
      "compilerOptions.plugins[0].name": "Swagger plugin to automatically infer ApiProperty from DTO, class-validator, comments over properties and endpoints",
      "compilerOptions.plugins[0].options.classValidatorShim": "Use class-validator validation decorator to document swagger API",
      "compilerOptions.plugins[0].options.introspectComments": "Generate API description and example from js comments"
    }
  }
}